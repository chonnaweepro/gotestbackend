basePath: /api
definitions:
  controllers.LoginPayload:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.ErrorResponse:
    properties:
      message:
        description: Code    int    `json:"code"`
        type: string
    type: object
  models.User:
    properties:
      account_number:
        type: string
      credit:
        type: number
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a Gin REST API.
  title: Thanakrit GOlang test Rest API
  version: "1.0"
paths:
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with initial credit
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - Auth
  /user/DeleteUserByID/{id}:
    put:
      consumes:
      - application/json
      description: Update a  user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User By ID
      tags:
      - User
  /user/GetUserByID/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User
  /user/UpdateUserByID/{id}:
    put:
      consumes:
      - application/json
      description: Update a  user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User By ID
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Logs in a user
      tags:
      - auth
  /user/profile:
    get:
      consumes:
      - application/json
      description: get user profile
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get by id
      tags:
      - User
  /userAll:
    get:
      consumes:
      - application/json
      description: Get details all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get All User
      tags:
      - User
swagger: "2.0"
