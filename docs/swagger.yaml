basePath: /api
definitions:
  controllers.LoginPayload:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  controllers.TransferListRequest:
    properties:
      end_date:
        type: string
      start_date:
        type: string
    type: object
  controllers.UpdateUserPayload:
    properties:
      account_number:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  controllers.transferRequest:
    properties:
      amount:
        type: number
      receiver_account:
        description: |-
          ID uint `json:"id"`
          SenderAccount   string  `json:"sender_account"`
        type: string
    type: object
  models.ErrorResponse:
    properties:
      message:
        description: Code    int    `json:"code"`
        type: string
    type: object
  models.Transaction:
    properties:
      amount:
        type: number
      created_at:
        type: string
      ender_remaining:
        type: number
      id:
        type: integer
      receiver_id:
        type: integer
      receiver_remaining:
        type: number
      sender_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.User:
    description: User represents the entity of a user with basic information like
      username, personal details, account number, and credit balance.
    properties:
      account_number:
        description: '@description The account number associated with the user.'
        type: string
      credit:
        type: number
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for a Gin REST API. \n Authorize  use Bearer
    {token from login} \n example  "Bearer eyJhbGciOiJIUzI"
  title: Thanakrit GOlang test Rest API
  version: "1.0"
paths:
  /accounting/transfer:
    post:
      consumes:
      - application/json
      description: TransferCredit transfers credit from one user to another
      parameters:
      - description: transferRequest data
        in: body
        name: transferRequest
        required: true
        schema:
          $ref: '#/definitions/controllers.transferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: transfer
      tags:
      - accounting
  /accounting/transfer-list:
    get:
      consumes:
      - application/json
      description: GetTransferList retrieves the list of credit transfer history with
        optional filters
      parameters:
      - description: 'date: ''2024-06-25'''
        in: body
        name: TransferListRequest
        schema:
          $ref: '#/definitions/controllers.TransferListRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: getTransferList
      tags:
      - accounting
  /user/DeleteUserByID/{id}:
    delete:
      consumes:
      - application/json
      description: Update a  user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User By ID
      tags:
      - CRUD
  /user/GetUserByID/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - CRUD
  /user/UpdateUserByID/{id}:
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update User By ID
      tags:
      - CRUD
  /user/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: Login payload
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginPayload'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: login
      tags:
      - Auth
  /user/me:
    get:
      consumes:
      - application/json
      description: GetUserProfile by id token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: getUser
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: UpdateUser by id token
      parameters:
      - description: UserPayload data
        in: body
        name: user
        schema:
          $ref: '#/definitions/controllers.UpdateUserPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: updateUser
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with initial credit
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Register a new user
      tags:
      - Auth
      - CRUD
  /userAll:
    get:
      consumes:
      - application/json
      description: Get details all user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "404":
          description: message
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All User
      tags:
      - CRUD
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
